// Code generated by MockGen. DO NOT EDIT.
// Source: poset.go

package node2

import (
	ecdsa "crypto/ecdsa"
	poset "github.com/Fantom-foundation/go-lachesis/src/poset"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPoset is a mock of Poset interface
type MockPoset struct {
	ctrl     *gomock.Controller
	recorder *MockPosetMockRecorder
}

// MockPosetMockRecorder is the mock recorder for MockPoset
type MockPosetMockRecorder struct {
	mock *MockPoset
}

// NewMockPoset creates a new mock instance
func NewMockPoset(ctrl *gomock.Controller) *MockPoset {
	mock := &MockPoset{ctrl: ctrl}
	mock.recorder = &MockPosetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPoset) EXPECT() *MockPosetMockRecorder {
	return m.recorder
}

// GetLastEvent mocks base method
func (m *MockPoset) GetLastEvent(arg0 string) (*poset.EventHash, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastEvent", arg0)
	ret0, _ := ret[0].(*poset.EventHash)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLastEvent indicates an expected call of GetLastEvent
func (mr *MockPosetMockRecorder) GetLastEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastEvent", reflect.TypeOf((*MockPoset)(nil).GetLastEvent), arg0)
}

// GetParticipantEvents mocks base method
func (m *MockPoset) GetParticipantEvents(arg0 string, arg1 int64) (*poset.EventHashes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParticipantEvents", arg0, arg1)
	ret0, _ := ret[0].(*poset.EventHashes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParticipantEvents indicates an expected call of GetParticipantEvents
func (mr *MockPosetMockRecorder) GetParticipantEvents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParticipantEvents", reflect.TypeOf((*MockPoset)(nil).GetParticipantEvents), arg0, arg1)
}

// GetEventBlock mocks base method
func (m *MockPoset) GetEventBlock(arg0 poset.EventHash) (*poset.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventBlock", arg0)
	ret0, _ := ret[0].(*poset.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventBlock indicates an expected call of GetEventBlock
func (mr *MockPosetMockRecorder) GetEventBlock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventBlock", reflect.TypeOf((*MockPoset)(nil).GetEventBlock), arg0)
}

// Close mocks base method
func (m *MockPoset) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockPosetMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPoset)(nil).Close))
}

// GetPendingLoadedEvents mocks base method
func (m *MockPoset) GetPendingLoadedEvents() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingLoadedEvents")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetPendingLoadedEvents indicates an expected call of GetPendingLoadedEvents
func (mr *MockPosetMockRecorder) GetPendingLoadedEvents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingLoadedEvents", reflect.TypeOf((*MockPoset)(nil).GetPendingLoadedEvents))
}

// InsertEvent mocks base method
func (m *MockPoset) InsertEvent(arg0 poset.Event, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertEvent indicates an expected call of InsertEvent
func (mr *MockPosetMockRecorder) InsertEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertEvent", reflect.TypeOf((*MockPoset)(nil).InsertEvent), arg0, arg1)
}

// SetWireInfoAndSign mocks base method
func (m *MockPoset) SetWireInfoAndSign(arg0 *poset.Event, arg1 *ecdsa.PrivateKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWireInfoAndSign", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWireInfoAndSign indicates an expected call of SetWireInfoAndSign
func (mr *MockPosetMockRecorder) SetWireInfoAndSign(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWireInfoAndSign", reflect.TypeOf((*MockPoset)(nil).SetWireInfoAndSign), arg0, arg1)
}

// GetLastBlockIndex mocks base method
func (m *MockPoset) GetLastBlockIndex() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastBlockIndex")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetLastBlockIndex indicates an expected call of GetLastBlockIndex
func (mr *MockPosetMockRecorder) GetLastBlockIndex() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastBlockIndex", reflect.TypeOf((*MockPoset)(nil).GetLastBlockIndex))
}

// GetBlock mocks base method
func (m *MockPoset) GetBlock(arg0 int64) (poset.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlock", arg0)
	ret0, _ := ret[0].(poset.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlock indicates an expected call of GetBlock
func (mr *MockPosetMockRecorder) GetBlock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlock", reflect.TypeOf((*MockPoset)(nil).GetBlock), arg0)
}

// NewEvent mocks base method
func (m *MockPoset) NewEvent(arg0 [][]byte, arg1 []poset.InternalTransaction, arg2 []poset.BlockSignature, arg3 poset.EventHashes, arg4 []byte, arg5 int64, arg6 poset.FlagTable) poset.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewEvent", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(poset.Event)
	return ret0
}

// NewEvent indicates an expected call of NewEvent
func (mr *MockPosetMockRecorder) NewEvent(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewEvent", reflect.TypeOf((*MockPoset)(nil).NewEvent), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}
